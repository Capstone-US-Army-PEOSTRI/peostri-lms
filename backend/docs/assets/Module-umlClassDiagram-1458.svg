<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="206px" preserveAspectRatio="none" style="width:303px;height:206px;background:#00000000;" version="1.1" viewBox="0 0 303 206" width="303px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="261" x="5" y="19">Dot Executable: /opt/local/bin/dot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="145" x="5" y="35.2969">File does not exist</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="291" x="5" y="51.5938">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="67.8906"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="79" x="5" y="84.1875">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="57" x="5" y="100.4844">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="72" x="5" y="116.7813">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="133.0781"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="17" x="10" y="149.375">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="165.6719"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="227" x="5" y="181.9688">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="198.2656"/><!--MD5=[945957407b9cf8e754c76966c1387c3f]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "Module" {
    +className : string
    +db : ArangoCollectionWrapper<IModule>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #parentField : null | Object
    +advance(user: AuthUser, id: string, force: boolean) : Promise<undefined | IModule>
    +automaticAdvance(user: AuthUser, id: string) : Promise<boolean>
    +complete(user: AuthUser, id: string) : Promise<IModule>
    +convertIDtoKEY(user: AuthUser, doc: IModule) : Promise<IModule>
    +create(user: AuthUser, files: any, d: IModule) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IModule>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +postAutomaticAdvance(user: AuthUser, mod: IModule) : Promise<boolean>
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +reset(user: AuthUser, id: string) : Promise<void>
    +resolveDependencies() : void
    +restart(user: AuthUser, id: string) : Promise<undefined | IModule>
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +start(user: AuthUser, id: string) : Promise<undefined | IModule>
    +update(user: AuthUser, files: any, id: string, doc: IModule) : Promise<void>
    +updateForeignKeys(doc: IModule, fn: Function, skippable: Function) : Promise<IModule>
    #forEachForeignKey(doc: IModule, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IModule>
    #modifyDoc(user: AuthUser, files: any, doc: any) : Promise<IModule>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: IModule, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IModule>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
    -calculatePercentComplete(mod: IModule) : Promise<void>
    -postComplete(user: AuthUser, mod: IModule, force: boolean) : Promise<IModule>
    -postStartNextStep(user: AuthUser, mod: IModule) : Promise<undefined | IModule>
    -removeReviseTasks(mod: IModule) : Promise<void>
}
class "DBManager<IModule>" {
    +className : string
    +db : ArangoCollectionWrapper<IModule>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    -defaultFilter : string
    +convertIDtoKEY(user: AuthUser, doc: IModule) : Promise<IModule>
    +create(user: AuthUser, files: any, d: IModule) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IModule>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +update(user: AuthUser, files: any, id: string, doc: IModule) : Promise<void>
    +updateForeignKeys(doc: IModule, fn: Function, skippable: Function) : Promise<IModule>
    #forEachForeignKey(doc: IModule, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IModule>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: IModule, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IModule>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
    -deleteOrphans() : Promise<ArrayCursor<any>>
    -disown() : Promise<void>
}
"DBManager<IModule>" <|- - "Module"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 11:46:50 EST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>