<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="206px" preserveAspectRatio="none" style="width:303px;height:206px;background:#00000000;" version="1.1" viewBox="0 0 303 206" width="303px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="261" x="5" y="19">Dot Executable: /opt/local/bin/dot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="145" x="5" y="35.2969">File does not exist</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="291" x="5" y="51.5938">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="67.8906"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="79" x="5" y="84.1875">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="57" x="5" y="100.4844">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="72" x="5" y="116.7813">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="133.0781"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="17" x="10" y="149.375">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="165.6719"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="227" x="5" y="181.9688">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="198.2656"/><!--MD5=[a174c929aaba610b1ea03b7f79a08804]
@startuml
skinparam BackgroundColor transparent
left to right direction
hide empty methods
hide empty fields
class "DBManager<Type>" {
    +className : string
    +db : ArangoCollectionWrapper<Type>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    -defaultFilter : string
    +convertIDtoKEY(user: AuthUser, doc: Type) : Promise<Type>
    +create(user: AuthUser, files: any, d: Type) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<Type>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +update(user: AuthUser, files: any, id: string, doc: Type) : Promise<void>
    +updateForeignKeys(doc: Type, fn: Function, skippable: Function) : Promise<Type>
    #forEachForeignKey(doc: Type, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<Type>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: Type, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<Type>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
    -deleteOrphans() : Promise<ArrayCursor<any>>
    -disown() : Promise<void>
}
class "DataManager<Type>" {
    +className : string
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    -dataEntries : [string, IDataFieldData][]
    +convertIDtoKEY(user: AuthUser, doc: Type) : Promise<Type>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +internal(fn: string, verbose: string) : APIError
    +updateForeignKeys(doc: Type, fn: Function, skippable: Function) : Promise<Type>
    #forEachForeignKey(doc: Type, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<Type>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: Type, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<Type>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
}
"DataManager<Type>" <|- - "DBManager<Type>"
class "Filemeta" {
    +className : string
    +db : ArangoCollectionWrapper<IFileRevisions>
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    +convertIDtoKEY(user: AuthUser, doc: IFileRevisions) : Promise<IFileRevisions>
    +create(user: AuthUser, files: any, d: IFileRevisions) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IFileRevisions>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +pushLatest(filemeta: IFileRevisions, fileId: string) : void
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +update(user: AuthUser, files: any, id: string, doc: IFileRevisions) : Promise<void>
    +updateForeignKeys(doc: IFileRevisions, fn: Function, skippable: Function) : Promise<IFileRevisions>
    #buildFromString(user: AuthUser, files: any, str: string, par: string) : Promise<IFileRevisions>
    #forEachForeignKey(doc: IFileRevisions, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IFileRevisions>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: IFileRevisions, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IFileRevisions>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
}
"DBManager<Type>" <|- - "Filemeta"
class "Filedata" {
    +className : string
    +db : ArangoCollectionWrapper<IFileMetadata>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    +convertIDtoKEY(user: AuthUser, doc: IFileMetadata) : Promise<IFileMetadata>
    +create(user: AuthUser, files: any, d: IFileMetadata) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +deleteFile(user: AuthUser, pathTo: string) : Promise<void>
    +deleteLostFiles() : Promise<ArrayCursor<any>>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IFileMetadata>
    +getStaticUrl(file: Object) : string
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +read(user: AuthUser, id: string) : Promise<string>
    +readLatest(user: AuthUser, doc: IFileRevisions) : Promise<string>
    +readSource(user: AuthUser, pathTo: string) : Promise<string>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +update(user: AuthUser, files: any, id: string, doc: IFileMetadata) : Promise<void>
    +updateForeignKeys(doc: IFileMetadata, fn: Function, skippable: Function) : Promise<IFileMetadata>
    +writeFile(user: AuthUser, file: IFileData) : Promise<IFileMetadata>
    #forEachForeignKey(doc: IFileMetadata, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IFileMetadata>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: IFileMetadata, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IFileMetadata>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
}
"DBManager<Type>" <|- - "Filedata"
class "Module" {
    +className : string
    +db : ArangoCollectionWrapper<IModule>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #parentField : null | Object
    +advance(user: AuthUser, id: string, force: boolean) : Promise<undefined | IModule>
    +automaticAdvance(user: AuthUser, id: string) : Promise<boolean>
    +complete(user: AuthUser, id: string) : Promise<IModule>
    +convertIDtoKEY(user: AuthUser, doc: IModule) : Promise<IModule>
    +create(user: AuthUser, files: any, d: IModule) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IModule>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +postAutomaticAdvance(user: AuthUser, mod: IModule) : Promise<boolean>
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +reset(user: AuthUser, id: string) : Promise<void>
    +resolveDependencies() : void
    +restart(user: AuthUser, id: string) : Promise<undefined | IModule>
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +start(user: AuthUser, id: string) : Promise<undefined | IModule>
    +update(user: AuthUser, files: any, id: string, doc: IModule) : Promise<void>
    +updateForeignKeys(doc: IModule, fn: Function, skippable: Function) : Promise<IModule>
    #forEachForeignKey(doc: IModule, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IModule>
    #modifyDoc(user: AuthUser, files: any, doc: any) : Promise<IModule>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: IModule, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IModule>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
    -calculatePercentComplete(mod: IModule) : Promise<void>
    -postComplete(user: AuthUser, mod: IModule, force: boolean) : Promise<IModule>
    -postStartNextStep(user: AuthUser, mod: IModule) : Promise<undefined | IModule>
    -removeReviseTasks(mod: IModule) : Promise<void>
}
"DBManager<Type>" <|- - "Module"
class "Notification" {
    +className : string
    +db : ArangoCollectionWrapper<INotification>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    +convertIDtoKEY(user: AuthUser, doc: INotification) : Promise<INotification>
    +create(user: AuthUser, files: any, d: INotification) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<INotification>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +read(id: string) : Promise<ArrayCursor<any>>
    +readAllForUser(userId: string) : Promise<ArrayCursor<string>>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +sendToMultipleUsers(recipients: string[], content: string, sender: ISender) : Promise<undefined | DocumentMetadata & Object>
    +update(user: AuthUser, files: any, id: string, doc: INotification) : Promise<void>
    +updateForeignKeys(doc: INotification, fn: Function, skippable: Function) : Promise<INotification>
    #forEachForeignKey(doc: INotification, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<INotification>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: INotification, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<INotification>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
}
"DBManager<Type>" <|- - "Notification"
class "Project" {
    +className : string
    +db : ArangoCollectionWrapper<IProject>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    +automaticAdvance(user: AuthUser, id: string) : Promise<void>
    +complete(user: AuthUser, id: string) : Promise<void>
    +convertIDtoKEY(user: AuthUser, doc: IProject) : Promise<IProject>
    +create(user: AuthUser, files: any, d: IProject) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IProject>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +prepareDocumentForUpload(user: AuthUser, files: any, doc: IProject, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IProject>
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +restart(user: AuthUser, id: string) : Promise<void>
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +start(user: AuthUser, id: string) : Promise<void>
    +update(user: AuthUser, files: any, id: string, doc: IProject) : Promise<void>
    +updateForeignKeys(doc: IProject, fn: Function, skippable: Function) : Promise<IProject>
    +updateStatus(user: AuthUser, id: string) : Promise<void>
    #forEachForeignKey(doc: IProject, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IProject>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
    -calculatePercentComplete(pro: IProject) : Promise<void>
    -postComplete(user: AuthUser, pro: IProject, force: boolean) : Promise<void>
    -postStartNextStep(user: AuthUser, pro: IProject) : Promise<void>
}
"DBManager<Type>" <|- - "Project"
class "Task" {
    +className : string
    +db : ArangoCollectionWrapper<ITask>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    +approve(user: AuthUser, taskId: string) : Promise<void>
    +complete(user: AuthUser, taskId: string) : Promise<void>
    +convertIDtoKEY(user: AuthUser, doc: ITask) : Promise<ITask>
    +create(user: AuthUser, files: any, d: ITask) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +deny(user: AuthUser, taskId: string, files: any, fileKey: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<ITask>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +review(user: AuthUser, taskId: string, files: any, fileKey: string) : Promise<void>
    +revise(user: AuthUser, taskId: string, reviseFileKey: string) : Promise<void>
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +sendManyNotifications(moduleTitle: string, moduleId: string, taskIds: string[], content: string | NotificationType) : Promise<void>
    +sendNotification(moduleTitle: string, moduleId: string, taskId: string, content: string | NotificationType) : Promise<void>
    +update(user: AuthUser, files: any, id: string, doc: ITask) : Promise<void>
    +updateForeignKeys(doc: ITask, fn: Function, skippable: Function) : Promise<ITask>
    +upload(user: AuthUser, taskId: string, files: any, fileKey: string) : Promise<void>
    #forEachForeignKey(doc: ITask, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<ITask>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: ITask, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<ITask>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
    -checkFileTaskModule(taskId: string, files: any, fileKey: string) : Promise<Object>
    -checkTaskAndModule(taskId: string) : Promise<Object>
    -saveFile(user: AuthUser, fileData: IFileData) : Promise<string>
}
"DBManager<Type>" <|- - "Task"
class "Team" {
    +className : string
    +db : ArangoCollectionWrapper<ITeam>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #modifyDoc : Function
    #parentField : null | Object
    +convertIDtoKEY(user: AuthUser, doc: ITeam) : Promise<ITeam>
    +create(user: AuthUser, files: any, d: ITeam) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<ITeam>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +update(user: AuthUser, files: any, id: string, doc: ITeam) : Promise<void>
    +updateForeignKeys(doc: ITeam, fn: Function, skippable: Function) : Promise<ITeam>
    #forEachForeignKey(doc: ITeam, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<ITeam>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: ITeam, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<ITeam>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
}
"DBManager<Type>" <|- - "Team"
class "User" {
    +className : string
    +db : ArangoCollectionWrapper<IUser>
    #buildFromString : Function
    #fieldData : Object
    #fieldEntries : [string, IFieldData][]
    #foreignEntries : [string, IForeignFieldData][]
    #hasCreate : boolean
    #hasUpdate : boolean
    #parentField : null | Object
    +convertIDtoKEY(user: AuthUser, doc: IUser) : Promise<IUser>
    +create(user: AuthUser, files: any, d: IUser) : Promise<string>
    +debugRoutes(r: Router<DefaultState, DefaultContext>) : void
    +delete(user: AuthUser, id: string) : Promise<void>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +getFromDB(user: AuthUser, id: string, noDeref: boolean, userRoute: boolean) : Promise<IUser>
    +getFromUsername(username: string) : Promise<IUser>
    +internal(fn: string, verbose: string) : APIError
    +parseQuery(q: any) : IQueryOpts
    +queryLengthWithFilter(q: any, filters: IFilterOpts[]) : Promise<number>
    +resolveDependencies() : void
    +runQuery(user: AuthUser, opts: IQueryOpts) : Promise<IQueryRange>
    +runQueryWithFilter(user: AuthUser, q: any, filters: IFilterOpts[]) : Promise<IQueryRange>
    +update(user: AuthUser, files: any, id: string, doc: IUser) : Promise<void>
    +updateForeignKeys(doc: IUser, fn: Function, skippable: Function) : Promise<IUser>
    +updateForNewLogin(key: string) : Promise<DocumentMetadata & Object>
    #forEachForeignKey(doc: IUser, keyCall: Function, arrCall: Function, stpCall: Function, skippable: Function) : Promise<IUser>
    #modifyDoc(user: AuthUser, files: any, doc: any) : Promise<IUser>
    #prepareDocumentForUpload(user: AuthUser, files: any, doc: IUser, exists: boolean, map: Map<DataManager<any>, any[]>, lastDBId: string) : Promise<IUser>
    #referenceFieldInDoc(user: AuthUser, files: any, doc: any, data: IFieldData, map: Map<DataManager<any>, any[]>, par: string) : Promise<any>
    #updateEachField(doc: any, allFn: Function, foreignFn: Function, dataFn: Function, otherFn: Function, parentFn: Function) : Promise<any>
}
"DBManager<Type>" <|- - "User"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 11:46:50 EST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>