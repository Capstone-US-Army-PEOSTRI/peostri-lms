<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="206px" preserveAspectRatio="none" style="width:303px;height:206px;background:#00000000;" version="1.1" viewBox="0 0 303 206" width="303px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="261" x="5" y="19">Dot Executable: /opt/local/bin/dot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="145" x="5" y="35.2969">File does not exist</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="291" x="5" y="51.5938">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="67.8906"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="79" x="5" y="84.1875">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="57" x="5" y="100.4844">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="72" x="5" y="116.7813">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="133.0781"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="17" x="10" y="149.375">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="165.6719"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="227" x="5" y="181.9688">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="0" x="10" y="198.2656"/><!--MD5=[a58c952d1cba71eb1a1a50fc08c654b2]
@startuml
skinparam BackgroundColor transparent
hide empty methods
hide empty fields
class "UserArangoWrapper" {
    +className : string
    #collection : DocumentCollection<IUser>
    {static} #DatabaseInstance : Database
    #getAllQueryFields : GeneratedAqlQuery
    +asId(idOrKey: string) : string
    +asKey(idOrKey: string) : string
    +assertIdExists(id: string) : Promise<void>
    +assertKeyExists(key: string) : Promise<string>
    +deleteOrphans(parentFieldLocal: string) : Promise<ArrayCursor<any>>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +exists(id: string) : Promise<boolean>
    +filterField(ids: string[], key: string, equals: string) : Promise<ArrayCursor<string>>
    +generateDBID() : string
    +get(id: string) : Promise<IUser>
    +getAll(opts: QueryOptions) : Promise<ArrayCursor<any>>
    +getAllCount(opts: IQueryOpts) : Promise<number>
    +getAllNotEqual(ids: string[], key: string, equals: string[]) : Promise<ArrayCursor<string>>
    +getFromIds(ids: string[]) : Promise<ArrayCursor<IUser>>
    +getFromUsername(username: string) : Promise<IUser>
    +getManyField<T>(ids: string[], ret: string) : Promise<ArrayCursor<T>>
    +getManyFields<A, B>(ids: string[], a: string, b: string) : Promise<ArrayCursor<Object>>
    +getManyFieldWithId<T>(ids: string[], ret: string) : Promise<ArrayCursor<Object>>
    +getNotEqual(ids: string[], key: string, equals: string) : Promise<ArrayCursor<string>>
    +getOneField<T>(id: string, ret: string) : Promise<T>
    +getOneFields<A, B>(id: string, a: string, b: string) : Promise<Object>
    +internal(fn: string, verbose: string) : APIError
    +isDBId(id: string) : boolean
    +isKeyOrId(idOrKey: string) : boolean
    +keyExists(key: string) : Promise<boolean>
    +keyToId(key: string) : string
    +rawQuery(aql: GeneratedAqlQuery) : Promise<ArrayCursor<any>>
    +remove(id: string) : Promise<void>
    +removeFromFieldArray(ids: string[], key: string, value: any) : Promise<ArrayCursor<any>>
    +runGetAllQuery(opts: IQueryOpts) : Promise<Object>
    +save(doc: IUser) : Promise<DocumentMetadata & Object>
    +tryExists(id: string) : Promise<boolean>
    +tryKeyExists(key: string) : Promise<boolean>
    +unionManyField(ids: string[], key: string, array: any[]) : Promise<ArrayCursor<any>>
    +update(doc: IUser) : Promise<DocumentMetadata & Object>
    +updateFaster(id: string, key: string, value: any) : Promise<ArrayCursor<any>>
    +updateFilterFaster(fKey: string, fEq: any, key: string, value: any) : Promise<ArrayCursor<string>>
    +updateManyFaster(ids: string[], key: string, value: any) : Promise<ArrayCursor<any>>
    #buildGetAllQuery(sort: ISortOpts, offset: number, count: number, filters: IFilterOpts[], justIds: boolean, raw: boolean) : GeneratedAqlQuery
    #getAllBuildFilterKey(filter: IFilterOpts) : GeneratedAqlQuery
    #getAllReturnQuery(query: GeneratedAqlQuery) : GeneratedAqlQuery
}
class "ArangoCollectionWrapper<IUser>" {
    +className : string
    #collection : DocumentCollection<IUser>
    {static} #DatabaseInstance : Database
    #getAllQueryFields : GeneratedAqlQuery
    -idRegex : RegExp
    +asId(idOrKey: string) : string
    +asKey(idOrKey: string) : string
    +assertIdExists(id: string) : Promise<void>
    +assertKeyExists(key: string) : Promise<string>
    +deleteOrphans(parentFieldLocal: string) : Promise<ArrayCursor<any>>
    +error(fn: string, status: HTTPStatus, message: string, verbose: string) : APIError
    +exists(id: string) : Promise<boolean>
    +filterField(ids: string[], key: string, equals: string) : Promise<ArrayCursor<string>>
    +generateDBID() : string
    +get(id: string) : Promise<IUser>
    +getAll(opts: QueryOptions) : Promise<ArrayCursor<any>>
    +getAllCount(opts: IQueryOpts) : Promise<number>
    +getAllNotEqual(ids: string[], key: string, equals: string[]) : Promise<ArrayCursor<string>>
    +getFromIds(ids: string[]) : Promise<ArrayCursor<IUser>>
    +getManyField<T>(ids: string[], ret: string) : Promise<ArrayCursor<T>>
    +getManyFields<A, B>(ids: string[], a: string, b: string) : Promise<ArrayCursor<Object>>
    +getManyFieldWithId<T>(ids: string[], ret: string) : Promise<ArrayCursor<Object>>
    +getNotEqual(ids: string[], key: string, equals: string) : Promise<ArrayCursor<string>>
    +getOneField<T>(id: string, ret: string) : Promise<T>
    +getOneFields<A, B>(id: string, a: string, b: string) : Promise<Object>
    +internal(fn: string, verbose: string) : APIError
    +isDBId(id: string) : boolean
    +isKeyOrId(idOrKey: string) : boolean
    +keyExists(key: string) : Promise<boolean>
    +keyToId(key: string) : string
    +rawQuery(aql: GeneratedAqlQuery) : Promise<ArrayCursor<any>>
    +remove(id: string) : Promise<void>
    +removeFromFieldArray(ids: string[], key: string, value: any) : Promise<ArrayCursor<any>>
    +runGetAllQuery(opts: IQueryOpts) : Promise<Object>
    +save(doc: IUser) : Promise<DocumentMetadata & Object>
    +tryExists(id: string) : Promise<boolean>
    +tryKeyExists(key: string) : Promise<boolean>
    +unionManyField(ids: string[], key: string, array: any[]) : Promise<ArrayCursor<any>>
    +update(doc: IUser) : Promise<DocumentMetadata & Object>
    +updateFaster(id: string, key: string, value: any) : Promise<ArrayCursor<any>>
    +updateFilterFaster(fKey: string, fEq: any, key: string, value: any) : Promise<ArrayCursor<string>>
    +updateManyFaster(ids: string[], key: string, value: any) : Promise<ArrayCursor<any>>
    #buildGetAllQuery(sort: ISortOpts, offset: number, count: number, filters: IFilterOpts[], justIds: boolean, raw: boolean) : GeneratedAqlQuery
    #getAllBuildFilterKey(filter: IFilterOpts) : GeneratedAqlQuery
    #getAllReturnQuery(query: GeneratedAqlQuery) : GeneratedAqlQuery
    -existsUnsafe(id: string) : Promise<boolean>
    -getUnsafe(id: string) : Promise<IUser>
    -removeUnsafe(id: string) : Promise<void>
    -saveUnsafe(doc: IUser) : Promise<DocumentMetadata & Object>
    -updateUnsafe(doc: IUser, opt: CollectionUpdateOptions) : Promise<DocumentMetadata & Object>
}
"ArangoCollectionWrapper<IUser>" <|- - "UserArangoWrapper"
@enduml

PlantUML version 1.2021.14(Fri Nov 12 11:46:50 EST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>